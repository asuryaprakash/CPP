// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "DeliverToEsme.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace {

const ::google::protobuf::Descriptor* DeliverToEsme_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeliverToEsme_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DeliverToEsme_2eproto() {
  protobuf_AddDesc_DeliverToEsme_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DeliverToEsme.proto");
  GOOGLE_CHECK(file != NULL);
  DeliverToEsme_descriptor_ = file->message_type(0);
  static const int DeliverToEsme_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, oa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, da_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, interface_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, reg_del_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, udh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, circle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, expiry_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, dcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, wapdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, lang_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, task_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, srv_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, submit_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, submit_msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, session_endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, sender_sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, receiver_sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, charging_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, service_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, service_url_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, retry_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, user_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, sms_submit_msgid_),
  };
  DeliverToEsme_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeliverToEsme_descriptor_,
      DeliverToEsme::default_instance_,
      DeliverToEsme_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverToEsme, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliverToEsme));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DeliverToEsme_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliverToEsme_descriptor_, &DeliverToEsme::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DeliverToEsme_2eproto() {
  delete DeliverToEsme::default_instance_;
  delete DeliverToEsme_reflection_;
}

void protobuf_AddDesc_DeliverToEsme_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023DeliverToEsme.proto\"\364\004\n\rDeliverToEsme\022"
    "\017\n\007task_id\030\001 \002(\r\022\016\n\006msg_id\030\002 \002(\r\022\n\n\002oa\030\003"
    " \002(\t\022\n\n\002da\030\004 \002(\t\022\013\n\003msg\030\005 \002(\014\022\024\n\014interfa"
    "ce_id\030\006 \002(\005\022\017\n\007reg_del\030\007 \001(\005\022\013\n\003udh\030\010 \001("
    "\t\022\021\n\tcircle_id\030\t \001(\005\022\022\n\nchannel_id\030\n \001(\005"
    "\022\023\n\013expiry_time\030\013 \001(\005\022\013\n\003pid\030\014 \001(\005\022\013\n\003dc"
    "s\030\r \001(\005\022\017\n\007wapdata\030\016 \001(\t\022\013\n\003url\030\017 \001(\t\022\022\n"
    "\007lang_id\030\020 \001(\005:\0010\022\021\n\ttask_name\030\021 \001(\t\022\020\n\010"
    "msg_type\030\022 \001(\005\022\020\n\010srv_code\030\023 \001(\t\022\020\n\010user"
    "name\030\024 \001(\t\022\016\n\006status\030\025 \001(\005\022\023\n\013submit_tim"
    "e\030\026 \001(\005\022\024\n\014submit_msgid\030\027 \001(\005\022\027\n\017session"
    "_endtime\030\030 \001(\005\022\030\n\020sender_sessionid\030\031 \001(\005"
    "\022\032\n\022receiver_sessionid\030\032 \001(\005\022\027\n\017charging"
    "_status\030\033 \001(\005\022\023\n\013service_url\030\034 \001(\t\022\032\n\022se"
    "rvice_url_status\030\035 \001(\t\022\026\n\013retry_count\030\036 "
    "\001(\005:\0010\022\022\n\nuser_input\030\037 \001(\t\022\030\n\020sms_submit"
    "_msgid\030  \001(\t", 652);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DeliverToEsme.proto", &protobuf_RegisterTypes);
  DeliverToEsme::default_instance_ = new DeliverToEsme();
  DeliverToEsme::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DeliverToEsme_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DeliverToEsme_2eproto {
  StaticDescriptorInitializer_DeliverToEsme_2eproto() {
    protobuf_AddDesc_DeliverToEsme_2eproto();
  }
} static_descriptor_initializer_DeliverToEsme_2eproto_;


// ===================================================================

const ::std::string DeliverToEsme::_default_oa_;
const ::std::string DeliverToEsme::_default_da_;
const ::std::string DeliverToEsme::_default_msg_;
const ::std::string DeliverToEsme::_default_udh_;
const ::std::string DeliverToEsme::_default_wapdata_;
const ::std::string DeliverToEsme::_default_url_;
const ::std::string DeliverToEsme::_default_task_name_;
const ::std::string DeliverToEsme::_default_srv_code_;
const ::std::string DeliverToEsme::_default_username_;
const ::std::string DeliverToEsme::_default_service_url_;
const ::std::string DeliverToEsme::_default_service_url_status_;
const ::std::string DeliverToEsme::_default_user_input_;
const ::std::string DeliverToEsme::_default_sms_submit_msgid_;
#ifndef _MSC_VER
const int DeliverToEsme::kTaskIdFieldNumber;
const int DeliverToEsme::kMsgIdFieldNumber;
const int DeliverToEsme::kOaFieldNumber;
const int DeliverToEsme::kDaFieldNumber;
const int DeliverToEsme::kMsgFieldNumber;
const int DeliverToEsme::kInterfaceIdFieldNumber;
const int DeliverToEsme::kRegDelFieldNumber;
const int DeliverToEsme::kUdhFieldNumber;
const int DeliverToEsme::kCircleIdFieldNumber;
const int DeliverToEsme::kChannelIdFieldNumber;
const int DeliverToEsme::kExpiryTimeFieldNumber;
const int DeliverToEsme::kPidFieldNumber;
const int DeliverToEsme::kDcsFieldNumber;
const int DeliverToEsme::kWapdataFieldNumber;
const int DeliverToEsme::kUrlFieldNumber;
const int DeliverToEsme::kLangIdFieldNumber;
const int DeliverToEsme::kTaskNameFieldNumber;
const int DeliverToEsme::kMsgTypeFieldNumber;
const int DeliverToEsme::kSrvCodeFieldNumber;
const int DeliverToEsme::kUsernameFieldNumber;
const int DeliverToEsme::kStatusFieldNumber;
const int DeliverToEsme::kSubmitTimeFieldNumber;
const int DeliverToEsme::kSubmitMsgidFieldNumber;
const int DeliverToEsme::kSessionEndtimeFieldNumber;
const int DeliverToEsme::kSenderSessionidFieldNumber;
const int DeliverToEsme::kReceiverSessionidFieldNumber;
const int DeliverToEsme::kChargingStatusFieldNumber;
const int DeliverToEsme::kServiceUrlFieldNumber;
const int DeliverToEsme::kServiceUrlStatusFieldNumber;
const int DeliverToEsme::kRetryCountFieldNumber;
const int DeliverToEsme::kUserInputFieldNumber;
const int DeliverToEsme::kSmsSubmitMsgidFieldNumber;
#endif  // !_MSC_VER

DeliverToEsme::DeliverToEsme()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeliverToEsme::InitAsDefaultInstance() {}

DeliverToEsme::DeliverToEsme(const DeliverToEsme& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeliverToEsme::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  msg_id_ = 0u;
  oa_ = const_cast< ::std::string*>(&_default_oa_);
  da_ = const_cast< ::std::string*>(&_default_da_);
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  interface_id_ = 0;
  reg_del_ = 0;
  udh_ = const_cast< ::std::string*>(&_default_udh_);
  circle_id_ = 0;
  channel_id_ = 0;
  expiry_time_ = 0;
  pid_ = 0;
  dcs_ = 0;
  wapdata_ = const_cast< ::std::string*>(&_default_wapdata_);
  url_ = const_cast< ::std::string*>(&_default_url_);
  lang_id_ = 0;
  task_name_ = const_cast< ::std::string*>(&_default_task_name_);
  msg_type_ = 0;
  srv_code_ = const_cast< ::std::string*>(&_default_srv_code_);
  username_ = const_cast< ::std::string*>(&_default_username_);
  status_ = 0;
  submit_time_ = 0;
  submit_msgid_ = 0;
  session_endtime_ = 0;
  sender_sessionid_ = 0;
  receiver_sessionid_ = 0;
  charging_status_ = 0;
  service_url_ = const_cast< ::std::string*>(&_default_service_url_);
  service_url_status_ = const_cast< ::std::string*>(&_default_service_url_status_);
  retry_count_ = 0;
  user_input_ = const_cast< ::std::string*>(&_default_user_input_);
  sms_submit_msgid_ = const_cast< ::std::string*>(&_default_sms_submit_msgid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliverToEsme::~DeliverToEsme() {
  SharedDtor();
}

void DeliverToEsme::SharedDtor() {
  if (oa_ != &_default_oa_) {
    delete oa_;
  }
  if (da_ != &_default_da_) {
    delete da_;
  }
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (udh_ != &_default_udh_) {
    delete udh_;
  }
  if (wapdata_ != &_default_wapdata_) {
    delete wapdata_;
  }
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (task_name_ != &_default_task_name_) {
    delete task_name_;
  }
  if (srv_code_ != &_default_srv_code_) {
    delete srv_code_;
  }
  if (username_ != &_default_username_) {
    delete username_;
  }
  if (service_url_ != &_default_service_url_) {
    delete service_url_;
  }
  if (service_url_status_ != &_default_service_url_status_) {
    delete service_url_status_;
  }
  if (user_input_ != &_default_user_input_) {
    delete user_input_;
  }
  if (sms_submit_msgid_ != &_default_sms_submit_msgid_) {
    delete sms_submit_msgid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DeliverToEsme::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliverToEsme_descriptor_;
}

const DeliverToEsme& DeliverToEsme::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeliverToEsme_2eproto();  return *default_instance_;
}

DeliverToEsme* DeliverToEsme::default_instance_ = NULL;

DeliverToEsme* DeliverToEsme::New() const {
  return new DeliverToEsme;
}

void DeliverToEsme::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    msg_id_ = 0u;
    if (_has_bit(2)) {
      if (oa_ != &_default_oa_) {
        oa_->clear();
      }
    }
    if (_has_bit(3)) {
      if (da_ != &_default_da_) {
        da_->clear();
      }
    }
    if (_has_bit(4)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    interface_id_ = 0;
    reg_del_ = 0;
    if (_has_bit(7)) {
      if (udh_ != &_default_udh_) {
        udh_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    circle_id_ = 0;
    channel_id_ = 0;
    expiry_time_ = 0;
    pid_ = 0;
    dcs_ = 0;
    if (_has_bit(13)) {
      if (wapdata_ != &_default_wapdata_) {
        wapdata_->clear();
      }
    }
    if (_has_bit(14)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    lang_id_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (task_name_ != &_default_task_name_) {
        task_name_->clear();
      }
    }
    msg_type_ = 0;
    if (_has_bit(18)) {
      if (srv_code_ != &_default_srv_code_) {
        srv_code_->clear();
      }
    }
    if (_has_bit(19)) {
      if (username_ != &_default_username_) {
        username_->clear();
      }
    }
    status_ = 0;
    submit_time_ = 0;
    submit_msgid_ = 0;
    session_endtime_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    sender_sessionid_ = 0;
    receiver_sessionid_ = 0;
    charging_status_ = 0;
    if (_has_bit(27)) {
      if (service_url_ != &_default_service_url_) {
        service_url_->clear();
      }
    }
    if (_has_bit(28)) {
      if (service_url_status_ != &_default_service_url_status_) {
        service_url_status_->clear();
      }
    }
    retry_count_ = 0;
    if (_has_bit(30)) {
      if (user_input_ != &_default_user_input_) {
        user_input_->clear();
      }
    }
    if (_has_bit(31)) {
      if (sms_submit_msgid_ != &_default_sms_submit_msgid_) {
        sms_submit_msgid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliverToEsme::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &task_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_msg_id;
        break;
      }
      
      // required uint32 msg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_msg_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msg_id_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_oa;
        break;
      }
      
      // required string oa = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_oa:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_oa()));
        if (input->ExpectTag(34)) goto parse_da;
        break;
      }
      
      // required string da = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_da:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_da()));
        if (input->ExpectTag(42)) goto parse_msg;
        break;
      }
      
      // required bytes msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_msg:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_msg()));
        if (input->ExpectTag(48)) goto parse_interface_id;
        break;
      }
      
      // required int32 interface_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_interface_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &interface_id_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_reg_del;
        break;
      }
      
      // optional int32 reg_del = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_reg_del:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &reg_del_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_udh;
        break;
      }
      
      // optional string udh = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_udh:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_udh()));
        if (input->ExpectTag(72)) goto parse_circle_id;
        break;
      }
      
      // optional int32 circle_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_circle_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &circle_id_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_channel_id;
        break;
      }
      
      // optional int32 channel_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_channel_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &channel_id_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_expiry_time;
        break;
      }
      
      // optional int32 expiry_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_expiry_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &expiry_time_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_pid;
        break;
      }
      
      // optional int32 pid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &pid_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_dcs;
        break;
      }
      
      // optional int32 dcs = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dcs:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &dcs_));
        _set_bit(12);
        if (input->ExpectTag(114)) goto parse_wapdata;
        break;
      }
      
      // optional string wapdata = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_wapdata:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_wapdata()));
        if (input->ExpectTag(122)) goto parse_url;
        break;
      }
      
      // optional string url = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_url:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_url()));
        if (input->ExpectTag(128)) goto parse_lang_id;
        break;
      }
      
      // optional int32 lang_id = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lang_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &lang_id_));
        _set_bit(15);
        if (input->ExpectTag(138)) goto parse_task_name;
        break;
      }
      
      // optional string task_name = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_task_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_task_name()));
        if (input->ExpectTag(144)) goto parse_msg_type;
        break;
      }
      
      // optional int32 msg_type = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_msg_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &msg_type_));
        _set_bit(17);
        if (input->ExpectTag(154)) goto parse_srv_code;
        break;
      }
      
      // optional string srv_code = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_srv_code:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srv_code()));
        if (input->ExpectTag(162)) goto parse_username;
        break;
      }
      
      // optional string username = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_username:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_username()));
        if (input->ExpectTag(168)) goto parse_status;
        break;
      }
      
      // optional int32 status = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &status_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_submit_time;
        break;
      }
      
      // optional int32 submit_time = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_submit_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &submit_time_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_submit_msgid;
        break;
      }
      
      // optional int32 submit_msgid = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_submit_msgid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &submit_msgid_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_session_endtime;
        break;
      }
      
      // optional int32 session_endtime = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_session_endtime:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &session_endtime_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_sender_sessionid;
        break;
      }
      
      // optional int32 sender_sessionid = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sender_sessionid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &sender_sessionid_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_receiver_sessionid;
        break;
      }
      
      // optional int32 receiver_sessionid = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_receiver_sessionid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &receiver_sessionid_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_charging_status;
        break;
      }
      
      // optional int32 charging_status = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_charging_status:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &charging_status_));
        _set_bit(26);
        if (input->ExpectTag(226)) goto parse_service_url;
        break;
      }
      
      // optional string service_url = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_service_url:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_service_url()));
        if (input->ExpectTag(234)) goto parse_service_url_status;
        break;
      }
      
      // optional string service_url_status = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_service_url_status:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_service_url_status()));
        if (input->ExpectTag(240)) goto parse_retry_count;
        break;
      }
      
      // optional int32 retry_count = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_retry_count:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &retry_count_));
        _set_bit(29);
        if (input->ExpectTag(250)) goto parse_user_input;
        break;
      }
      
      // optional string user_input = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_user_input:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_user_input()));
        if (input->ExpectTag(258)) goto parse_sms_submit_msgid;
        break;
      }
      
      // optional string sms_submit_msgid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sms_submit_msgid:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_sms_submit_msgid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeliverToEsme::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DeliverToEsme::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 task_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->task_id(), output);
  }
  
  // required uint32 msg_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msg_id(), output);
  }
  
  // required string oa = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->oa(), output);
  }
  
  // required string da = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->da(), output);
  }
  
  // required bytes msg = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->msg(), output);
  }
  
  // required int32 interface_id = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->interface_id(), output);
  }
  
  // optional int32 reg_del = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->reg_del(), output);
  }
  
  // optional string udh = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->udh(), output);
  }
  
  // optional int32 circle_id = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(9, this->circle_id(), output);
  }
  
  // optional int32 channel_id = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(10, this->channel_id(), output);
  }
  
  // optional int32 expiry_time = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(11, this->expiry_time(), output);
  }
  
  // optional int32 pid = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(12, this->pid(), output);
  }
  
  // optional int32 dcs = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(13, this->dcs(), output);
  }
  
  // optional string wapdata = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteString(14, this->wapdata(), output);
  }
  
  // optional string url = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteString(15, this->url(), output);
  }
  
  // optional int32 lang_id = 16 [default = 0];
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(16, this->lang_id(), output);
  }
  
  // optional string task_name = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteString(17, this->task_name(), output);
  }
  
  // optional int32 msg_type = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(18, this->msg_type(), output);
  }
  
  // optional string srv_code = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteString(19, this->srv_code(), output);
  }
  
  // optional string username = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteString(20, this->username(), output);
  }
  
  // optional int32 status = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(21, this->status(), output);
  }
  
  // optional int32 submit_time = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(22, this->submit_time(), output);
  }
  
  // optional int32 submit_msgid = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(23, this->submit_msgid(), output);
  }
  
  // optional int32 session_endtime = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(24, this->session_endtime(), output);
  }
  
  // optional int32 sender_sessionid = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(25, this->sender_sessionid(), output);
  }
  
  // optional int32 receiver_sessionid = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(26, this->receiver_sessionid(), output);
  }
  
  // optional int32 charging_status = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(27, this->charging_status(), output);
  }
  
  // optional string service_url = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteString(28, this->service_url(), output);
  }
  
  // optional string service_url_status = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteString(29, this->service_url_status(), output);
  }
  
  // optional int32 retry_count = 30 [default = 0];
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(30, this->retry_count(), output);
  }
  
  // optional string user_input = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteString(31, this->user_input(), output);
  }
  
  // optional string sms_submit_msgid = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteString(32, this->sms_submit_msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeliverToEsme::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // required uint32 msg_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msg_id(), target);
  }
  
  // required string oa = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->oa(), target);
  }
  
  // required string da = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->da(), target);
  }
  
  // required bytes msg = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->msg(), target);
  }
  
  // required int32 interface_id = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->interface_id(), target);
  }
  
  // optional int32 reg_del = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->reg_del(), target);
  }
  
  // optional string udh = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->udh(), target);
  }
  
  // optional int32 circle_id = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(9, this->circle_id(), target);
  }
  
  // optional int32 channel_id = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(10, this->channel_id(), target);
  }
  
  // optional int32 expiry_time = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(11, this->expiry_time(), target);
  }
  
  // optional int32 pid = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(12, this->pid(), target);
  }
  
  // optional int32 dcs = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(13, this->dcs(), target);
  }
  
  // optional string wapdata = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(14, this->wapdata(), target);
  }
  
  // optional string url = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(15, this->url(), target);
  }
  
  // optional int32 lang_id = 16 [default = 0];
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(16, this->lang_id(), target);
  }
  
  // optional string task_name = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(17, this->task_name(), target);
  }
  
  // optional int32 msg_type = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(18, this->msg_type(), target);
  }
  
  // optional string srv_code = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(19, this->srv_code(), target);
  }
  
  // optional string username = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(20, this->username(), target);
  }
  
  // optional int32 status = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(21, this->status(), target);
  }
  
  // optional int32 submit_time = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(22, this->submit_time(), target);
  }
  
  // optional int32 submit_msgid = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(23, this->submit_msgid(), target);
  }
  
  // optional int32 session_endtime = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(24, this->session_endtime(), target);
  }
  
  // optional int32 sender_sessionid = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(25, this->sender_sessionid(), target);
  }
  
  // optional int32 receiver_sessionid = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(26, this->receiver_sessionid(), target);
  }
  
  // optional int32 charging_status = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(27, this->charging_status(), target);
  }
  
  // optional string service_url = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(28, this->service_url(), target);
  }
  
  // optional string service_url_status = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(29, this->service_url_status(), target);
  }
  
  // optional int32 retry_count = 30 [default = 0];
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(30, this->retry_count(), target);
  }
  
  // optional string user_input = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(31, this->user_input(), target);
  }
  
  // optional string sms_submit_msgid = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(32, this->sms_submit_msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeliverToEsme::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->task_id());
    }
    
    // required uint32 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msg_id());
    }
    
    // required string oa = 3;
    if (has_oa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->oa());
    }
    
    // required string da = 4;
    if (has_da()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->da());
    }
    
    // required bytes msg = 5;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->msg());
    }
    
    // required int32 interface_id = 6;
    if (has_interface_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->interface_id());
    }
    
    // optional int32 reg_del = 7;
    if (has_reg_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->reg_del());
    }
    
    // optional string udh = 8;
    if (has_udh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->udh());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 circle_id = 9;
    if (has_circle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->circle_id());
    }
    
    // optional int32 channel_id = 10;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->channel_id());
    }
    
    // optional int32 expiry_time = 11;
    if (has_expiry_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->expiry_time());
    }
    
    // optional int32 pid = 12;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->pid());
    }
    
    // optional int32 dcs = 13;
    if (has_dcs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->dcs());
    }
    
    // optional string wapdata = 14;
    if (has_wapdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->wapdata());
    }
    
    // optional string url = 15;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->url());
    }
    
    // optional int32 lang_id = 16 [default = 0];
    if (has_lang_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->lang_id());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string task_name = 17;
    if (has_task_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->task_name());
    }
    
    // optional int32 msg_type = 18;
    if (has_msg_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->msg_type());
    }
    
    // optional string srv_code = 19;
    if (has_srv_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srv_code());
    }
    
    // optional string username = 20;
    if (has_username()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->username());
    }
    
    // optional int32 status = 21;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->status());
    }
    
    // optional int32 submit_time = 22;
    if (has_submit_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->submit_time());
    }
    
    // optional int32 submit_msgid = 23;
    if (has_submit_msgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->submit_msgid());
    }
    
    // optional int32 session_endtime = 24;
    if (has_session_endtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->session_endtime());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 sender_sessionid = 25;
    if (has_sender_sessionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->sender_sessionid());
    }
    
    // optional int32 receiver_sessionid = 26;
    if (has_receiver_sessionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->receiver_sessionid());
    }
    
    // optional int32 charging_status = 27;
    if (has_charging_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->charging_status());
    }
    
    // optional string service_url = 28;
    if (has_service_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->service_url());
    }
    
    // optional string service_url_status = 29;
    if (has_service_url_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->service_url_status());
    }
    
    // optional int32 retry_count = 30 [default = 0];
    if (has_retry_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->retry_count());
    }
    
    // optional string user_input = 31;
    if (has_user_input()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->user_input());
    }
    
    // optional string sms_submit_msgid = 32;
    if (has_sms_submit_msgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->sms_submit_msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DeliverToEsme::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliverToEsme* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeliverToEsme*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliverToEsme::MergeFrom(const DeliverToEsme& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_id(from.task_id());
    }
    if (from._has_bit(1)) {
      set_msg_id(from.msg_id());
    }
    if (from._has_bit(2)) {
      set_oa(from.oa());
    }
    if (from._has_bit(3)) {
      set_da(from.da());
    }
    if (from._has_bit(4)) {
      set_msg(from.msg());
    }
    if (from._has_bit(5)) {
      set_interface_id(from.interface_id());
    }
    if (from._has_bit(6)) {
      set_reg_del(from.reg_del());
    }
    if (from._has_bit(7)) {
      set_udh(from.udh());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_circle_id(from.circle_id());
    }
    if (from._has_bit(9)) {
      set_channel_id(from.channel_id());
    }
    if (from._has_bit(10)) {
      set_expiry_time(from.expiry_time());
    }
    if (from._has_bit(11)) {
      set_pid(from.pid());
    }
    if (from._has_bit(12)) {
      set_dcs(from.dcs());
    }
    if (from._has_bit(13)) {
      set_wapdata(from.wapdata());
    }
    if (from._has_bit(14)) {
      set_url(from.url());
    }
    if (from._has_bit(15)) {
      set_lang_id(from.lang_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_task_name(from.task_name());
    }
    if (from._has_bit(17)) {
      set_msg_type(from.msg_type());
    }
    if (from._has_bit(18)) {
      set_srv_code(from.srv_code());
    }
    if (from._has_bit(19)) {
      set_username(from.username());
    }
    if (from._has_bit(20)) {
      set_status(from.status());
    }
    if (from._has_bit(21)) {
      set_submit_time(from.submit_time());
    }
    if (from._has_bit(22)) {
      set_submit_msgid(from.submit_msgid());
    }
    if (from._has_bit(23)) {
      set_session_endtime(from.session_endtime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_sender_sessionid(from.sender_sessionid());
    }
    if (from._has_bit(25)) {
      set_receiver_sessionid(from.receiver_sessionid());
    }
    if (from._has_bit(26)) {
      set_charging_status(from.charging_status());
    }
    if (from._has_bit(27)) {
      set_service_url(from.service_url());
    }
    if (from._has_bit(28)) {
      set_service_url_status(from.service_url_status());
    }
    if (from._has_bit(29)) {
      set_retry_count(from.retry_count());
    }
    if (from._has_bit(30)) {
      set_user_input(from.user_input());
    }
    if (from._has_bit(31)) {
      set_sms_submit_msgid(from.sms_submit_msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliverToEsme::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverToEsme::CopyFrom(const DeliverToEsme& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverToEsme::Swap(DeliverToEsme* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(oa_, other->oa_);
    std::swap(da_, other->da_);
    std::swap(msg_, other->msg_);
    std::swap(interface_id_, other->interface_id_);
    std::swap(reg_del_, other->reg_del_);
    std::swap(udh_, other->udh_);
    std::swap(circle_id_, other->circle_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(expiry_time_, other->expiry_time_);
    std::swap(pid_, other->pid_);
    std::swap(dcs_, other->dcs_);
    std::swap(wapdata_, other->wapdata_);
    std::swap(url_, other->url_);
    std::swap(lang_id_, other->lang_id_);
    std::swap(task_name_, other->task_name_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(srv_code_, other->srv_code_);
    std::swap(username_, other->username_);
    std::swap(status_, other->status_);
    std::swap(submit_time_, other->submit_time_);
    std::swap(submit_msgid_, other->submit_msgid_);
    std::swap(session_endtime_, other->session_endtime_);
    std::swap(sender_sessionid_, other->sender_sessionid_);
    std::swap(receiver_sessionid_, other->receiver_sessionid_);
    std::swap(charging_status_, other->charging_status_);
    std::swap(service_url_, other->service_url_);
    std::swap(service_url_status_, other->service_url_status_);
    std::swap(retry_count_, other->retry_count_);
    std::swap(user_input_, other->user_input_);
    std::swap(sms_submit_msgid_, other->sms_submit_msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DeliverToEsme::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* DeliverToEsme::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DeliverToEsme::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DeliverToEsme_reflection_;
}
