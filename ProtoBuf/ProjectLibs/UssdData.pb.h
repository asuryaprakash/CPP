// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_UssdData_2eproto__INCLUDED
#define PROTOBUF_UssdData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UssdData_2eproto();
void protobuf_AssignDesc_UssdData_2eproto();
void protobuf_ShutdownFile_UssdData_2eproto();

class UssdData;

enum UssdData_operation_type {
  UssdData_operation_type_LOGIN = 1,
  UssdData_operation_type_LOGIN_RESP = 2,
  UssdData_operation_type_LOGOUT = 3,
  UssdData_operation_type_LOGOUT_RESP = 4,
  UssdData_operation_type_START = 5,
  UssdData_operation_type_CONTINUE = 6,
  UssdData_operation_type_END = 7,
  UssdData_operation_type_ABORT = 8,
  UssdData_operation_type_ENQ_LINK = 9,
  UssdData_operation_type_ENQ_LINK_RESP = 10
};
const ::google::protobuf::EnumDescriptor* UssdData_operation_type_descriptor();
bool UssdData_operation_type_IsValid(int value);
const UssdData_operation_type UssdData_operation_type_operation_type_MIN = UssdData_operation_type_LOGIN;
const UssdData_operation_type UssdData_operation_type_operation_type_MAX = UssdData_operation_type_ENQ_LINK_RESP;

inline const ::std::string& UssdData_operation_type_Name(UssdData_operation_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    UssdData_operation_type_descriptor(), value);
}
inline bool UssdData_operation_type_Parse(
    const ::std::string& name, UssdData_operation_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UssdData_operation_type>(
    UssdData_operation_type_descriptor(), name, value);
}
enum UssdData_Msg_Type {
  UssdData_Msg_Type_REQUEST = 1,
  UssdData_Msg_Type_NOTIFY = 2,
  UssdData_Msg_Type_RESPONCE = 3,
  UssdData_Msg_Type_RELEASE = 4
};
const ::google::protobuf::EnumDescriptor* UssdData_Msg_Type_descriptor();
bool UssdData_Msg_Type_IsValid(int value);
const UssdData_Msg_Type UssdData_Msg_Type_Msg_Type_MIN = UssdData_Msg_Type_REQUEST;
const UssdData_Msg_Type UssdData_Msg_Type_Msg_Type_MAX = UssdData_Msg_Type_RELEASE;

inline const ::std::string& UssdData_Msg_Type_Name(UssdData_Msg_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    UssdData_Msg_Type_descriptor(), value);
}
inline bool UssdData_Msg_Type_Parse(
    const ::std::string& name, UssdData_Msg_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UssdData_Msg_Type>(
    UssdData_Msg_Type_descriptor(), name, value);
}
// ===================================================================

class UssdData : public ::google::protobuf::Message {
 public:
  UssdData();
  virtual ~UssdData();
  
  UssdData(const UssdData& from);
  
  inline UssdData& operator=(const UssdData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UssdData& default_instance();
  void Swap(UssdData* other);
  
  // implements Message ----------------------------------------------
  
  UssdData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UssdData& from);
  void MergeFrom(const UssdData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  typedef UssdData_operation_type operation_type;
  static const operation_type LOGIN = UssdData_operation_type_LOGIN;
  static const operation_type LOGIN_RESP = UssdData_operation_type_LOGIN_RESP;
  static const operation_type LOGOUT = UssdData_operation_type_LOGOUT;
  static const operation_type LOGOUT_RESP = UssdData_operation_type_LOGOUT_RESP;
  static const operation_type START = UssdData_operation_type_START;
  static const operation_type CONTINUE = UssdData_operation_type_CONTINUE;
  static const operation_type END = UssdData_operation_type_END;
  static const operation_type ABORT = UssdData_operation_type_ABORT;
  static const operation_type ENQ_LINK = UssdData_operation_type_ENQ_LINK;
  static const operation_type ENQ_LINK_RESP = UssdData_operation_type_ENQ_LINK_RESP;
  static inline const ::google::protobuf::EnumDescriptor*
  operation_type_descriptor() {
    return UssdData_operation_type_descriptor();
  }
  static inline bool operation_type_IsValid(int value) {
    return UssdData_operation_type_IsValid(value);
  }
  static inline const ::std::string& operation_type_Name(operation_type value) {
    return UssdData_operation_type_Name(value);
  }
  static inline bool operation_type_Parse(const ::std::string& name,
      operation_type* value) {
    return UssdData_operation_type_Parse(name, value);
  }
  static const operation_type operation_type_MIN =
    UssdData_operation_type_operation_type_MIN;
  static const operation_type operation_type_MAX =
    UssdData_operation_type_operation_type_MAX;
  
  typedef UssdData_Msg_Type Msg_Type;
  static const Msg_Type REQUEST = UssdData_Msg_Type_REQUEST;
  static const Msg_Type NOTIFY = UssdData_Msg_Type_NOTIFY;
  static const Msg_Type RESPONCE = UssdData_Msg_Type_RESPONCE;
  static const Msg_Type RELEASE = UssdData_Msg_Type_RELEASE;
  static inline const ::google::protobuf::EnumDescriptor*
  Msg_Type_descriptor() {
    return UssdData_Msg_Type_descriptor();
  }
  static inline bool Msg_Type_IsValid(int value) {
    return UssdData_Msg_Type_IsValid(value);
  }
  static inline const ::std::string& Msg_Type_Name(Msg_Type value) {
    return UssdData_Msg_Type_Name(value);
  }
  static inline bool Msg_Type_Parse(const ::std::string& name,
      Msg_Type* value) {
    return UssdData_Msg_Type_Parse(name, value);
  }
  static const Msg_Type Msg_Type_MIN =
    UssdData_Msg_Type_Msg_Type_MIN;
  static const Msg_Type Msg_Type_MAX =
    UssdData_Msg_Type_Msg_Type_MAX;
  
  // accessors -------------------------------------------------------
  
  // optional uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);
  
  // optional uint32 dcs = 2;
  inline bool has_dcs() const;
  inline void clear_dcs();
  static const int kDcsFieldNumber = 2;
  inline ::google::protobuf::uint32 dcs() const;
  inline void set_dcs(::google::protobuf::uint32 value);
  
  // optional string oa = 3;
  inline bool has_oa() const;
  inline void clear_oa();
  static const int kOaFieldNumber = 3;
  inline const ::std::string& oa() const;
  inline void set_oa(const ::std::string& value);
  inline void set_oa(const char* value);
  inline void set_oa(const char* value, size_t size);
  inline ::std::string* mutable_oa();
  
  // optional string da = 4;
  inline bool has_da() const;
  inline void clear_da();
  static const int kDaFieldNumber = 4;
  inline const ::std::string& da() const;
  inline void set_da(const ::std::string& value);
  inline void set_da(const char* value);
  inline void set_da(const char* value, size_t size);
  inline ::std::string* mutable_da();
  
  // optional bytes msg = 5;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 5;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // optional .UssdData.operation_type op_type = 6;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 6;
  inline ::UssdData_operation_type op_type() const;
  inline void set_op_type(::UssdData_operation_type value);
  
  // optional .UssdData.Msg_Type msg_type = 7;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 7;
  inline ::UssdData_Msg_Type msg_type() const;
  inline void set_msg_type(::UssdData_Msg_Type value);
  
  // optional string srv_code = 8;
  inline bool has_srv_code() const;
  inline void clear_srv_code();
  static const int kSrvCodeFieldNumber = 8;
  inline const ::std::string& srv_code() const;
  inline void set_srv_code(const ::std::string& value);
  inline void set_srv_code(const char* value);
  inline void set_srv_code(const char* value, size_t size);
  inline ::std::string* mutable_srv_code();
  
  // optional int32 status = 9;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 9;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional int32 session_status = 10 [default = 0];
  inline bool has_session_status() const;
  inline void clear_session_status();
  static const int kSessionStatusFieldNumber = 10;
  inline ::google::protobuf::int32 session_status() const;
  inline void set_session_status(::google::protobuf::int32 value);
  
  // optional int32 delivery_report = 11 [default = 0];
  inline bool has_delivery_report() const;
  inline void clear_delivery_report();
  static const int kDeliveryReportFieldNumber = 11;
  inline ::google::protobuf::int32 delivery_report() const;
  inline void set_delivery_report(::google::protobuf::int32 value);
  
  // optional string imsi = 12;
  inline bool has_imsi() const;
  inline void clear_imsi();
  static const int kImsiFieldNumber = 12;
  inline const ::std::string& imsi() const;
  inline void set_imsi(const ::std::string& value);
  inline void set_imsi(const char* value);
  inline void set_imsi(const char* value, size_t size);
  inline ::std::string* mutable_imsi();
  
  // optional int32 sender_session_id = 13 [default = 0];
  inline bool has_sender_session_id() const;
  inline void clear_sender_session_id();
  static const int kSenderSessionIdFieldNumber = 13;
  inline ::google::protobuf::int32 sender_session_id() const;
  inline void set_sender_session_id(::google::protobuf::int32 value);
  
  // optional int32 receiver_session_id = 14 [default = 0];
  inline bool has_receiver_session_id() const;
  inline void clear_receiver_session_id();
  static const int kReceiverSessionIdFieldNumber = 14;
  inline ::google::protobuf::int32 receiver_session_id() const;
  inline void set_receiver_session_id(::google::protobuf::int32 value);
  
  // optional string username = 15;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 15;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  
  // optional string password = 16;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 16;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  
  // optional string app_id = 17;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 17;
  inline const ::std::string& app_id() const;
  inline void set_app_id(const ::std::string& value);
  inline void set_app_id(const char* value);
  inline void set_app_id(const char* value, size_t size);
  inline ::std::string* mutable_app_id();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 dcs_;
  ::std::string* oa_;
  static const ::std::string _default_oa_;
  ::std::string* da_;
  static const ::std::string _default_da_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  int op_type_;
  int msg_type_;
  ::std::string* srv_code_;
  static const ::std::string _default_srv_code_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 session_status_;
  ::google::protobuf::int32 delivery_report_;
  ::std::string* imsi_;
  static const ::std::string _default_imsi_;
  ::google::protobuf::int32 sender_session_id_;
  ::google::protobuf::int32 receiver_session_id_;
  ::std::string* username_;
  static const ::std::string _default_username_;
  ::std::string* password_;
  static const ::std::string _default_password_;
  ::std::string* app_id_;
  static const ::std::string _default_app_id_;
  friend void  protobuf_AddDesc_UssdData_2eproto();
  friend void protobuf_AssignDesc_UssdData_2eproto();
  friend void protobuf_ShutdownFile_UssdData_2eproto();
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UssdData* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// UssdData

// optional uint32 version = 1;
inline bool UssdData::has_version() const {
  return _has_bit(0);
}
inline void UssdData::clear_version() {
  version_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 UssdData::version() const {
  return version_;
}
inline void UssdData::set_version(::google::protobuf::uint32 value) {
  _set_bit(0);
  version_ = value;
}

// optional uint32 dcs = 2;
inline bool UssdData::has_dcs() const {
  return _has_bit(1);
}
inline void UssdData::clear_dcs() {
  dcs_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 UssdData::dcs() const {
  return dcs_;
}
inline void UssdData::set_dcs(::google::protobuf::uint32 value) {
  _set_bit(1);
  dcs_ = value;
}

// optional string oa = 3;
inline bool UssdData::has_oa() const {
  return _has_bit(2);
}
inline void UssdData::clear_oa() {
  if (oa_ != &_default_oa_) {
    oa_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& UssdData::oa() const {
  return *oa_;
}
inline void UssdData::set_oa(const ::std::string& value) {
  _set_bit(2);
  if (oa_ == &_default_oa_) {
    oa_ = new ::std::string;
  }
  oa_->assign(value);
}
inline void UssdData::set_oa(const char* value) {
  _set_bit(2);
  if (oa_ == &_default_oa_) {
    oa_ = new ::std::string;
  }
  oa_->assign(value);
}
inline void UssdData::set_oa(const char* value, size_t size) {
  _set_bit(2);
  if (oa_ == &_default_oa_) {
    oa_ = new ::std::string;
  }
  oa_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UssdData::mutable_oa() {
  _set_bit(2);
  if (oa_ == &_default_oa_) {
    oa_ = new ::std::string;
  }
  return oa_;
}

// optional string da = 4;
inline bool UssdData::has_da() const {
  return _has_bit(3);
}
inline void UssdData::clear_da() {
  if (da_ != &_default_da_) {
    da_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& UssdData::da() const {
  return *da_;
}
inline void UssdData::set_da(const ::std::string& value) {
  _set_bit(3);
  if (da_ == &_default_da_) {
    da_ = new ::std::string;
  }
  da_->assign(value);
}
inline void UssdData::set_da(const char* value) {
  _set_bit(3);
  if (da_ == &_default_da_) {
    da_ = new ::std::string;
  }
  da_->assign(value);
}
inline void UssdData::set_da(const char* value, size_t size) {
  _set_bit(3);
  if (da_ == &_default_da_) {
    da_ = new ::std::string;
  }
  da_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UssdData::mutable_da() {
  _set_bit(3);
  if (da_ == &_default_da_) {
    da_ = new ::std::string;
  }
  return da_;
}

// optional bytes msg = 5;
inline bool UssdData::has_msg() const {
  return _has_bit(4);
}
inline void UssdData::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& UssdData::msg() const {
  return *msg_;
}
inline void UssdData::set_msg(const ::std::string& value) {
  _set_bit(4);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void UssdData::set_msg(const char* value) {
  _set_bit(4);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void UssdData::set_msg(const void* value, size_t size) {
  _set_bit(4);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UssdData::mutable_msg() {
  _set_bit(4);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// optional .UssdData.operation_type op_type = 6;
inline bool UssdData::has_op_type() const {
  return _has_bit(5);
}
inline void UssdData::clear_op_type() {
  op_type_ = 1;
  _clear_bit(5);
}
inline ::UssdData_operation_type UssdData::op_type() const {
  return static_cast< ::UssdData_operation_type >(op_type_);
}
inline void UssdData::set_op_type(::UssdData_operation_type value) {
  GOOGLE_DCHECK(::UssdData_operation_type_IsValid(value));
  _set_bit(5);
  op_type_ = value;
}

// optional .UssdData.Msg_Type msg_type = 7;
inline bool UssdData::has_msg_type() const {
  return _has_bit(6);
}
inline void UssdData::clear_msg_type() {
  msg_type_ = 1;
  _clear_bit(6);
}
inline ::UssdData_Msg_Type UssdData::msg_type() const {
  return static_cast< ::UssdData_Msg_Type >(msg_type_);
}
inline void UssdData::set_msg_type(::UssdData_Msg_Type value) {
  GOOGLE_DCHECK(::UssdData_Msg_Type_IsValid(value));
  _set_bit(6);
  msg_type_ = value;
}

// optional string srv_code = 8;
inline bool UssdData::has_srv_code() const {
  return _has_bit(7);
}
inline void UssdData::clear_srv_code() {
  if (srv_code_ != &_default_srv_code_) {
    srv_code_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& UssdData::srv_code() const {
  return *srv_code_;
}
inline void UssdData::set_srv_code(const ::std::string& value) {
  _set_bit(7);
  if (srv_code_ == &_default_srv_code_) {
    srv_code_ = new ::std::string;
  }
  srv_code_->assign(value);
}
inline void UssdData::set_srv_code(const char* value) {
  _set_bit(7);
  if (srv_code_ == &_default_srv_code_) {
    srv_code_ = new ::std::string;
  }
  srv_code_->assign(value);
}
inline void UssdData::set_srv_code(const char* value, size_t size) {
  _set_bit(7);
  if (srv_code_ == &_default_srv_code_) {
    srv_code_ = new ::std::string;
  }
  srv_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UssdData::mutable_srv_code() {
  _set_bit(7);
  if (srv_code_ == &_default_srv_code_) {
    srv_code_ = new ::std::string;
  }
  return srv_code_;
}

// optional int32 status = 9;
inline bool UssdData::has_status() const {
  return _has_bit(8);
}
inline void UssdData::clear_status() {
  status_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 UssdData::status() const {
  return status_;
}
inline void UssdData::set_status(::google::protobuf::int32 value) {
  _set_bit(8);
  status_ = value;
}

// optional int32 session_status = 10 [default = 0];
inline bool UssdData::has_session_status() const {
  return _has_bit(9);
}
inline void UssdData::clear_session_status() {
  session_status_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 UssdData::session_status() const {
  return session_status_;
}
inline void UssdData::set_session_status(::google::protobuf::int32 value) {
  _set_bit(9);
  session_status_ = value;
}

// optional int32 delivery_report = 11 [default = 0];
inline bool UssdData::has_delivery_report() const {
  return _has_bit(10);
}
inline void UssdData::clear_delivery_report() {
  delivery_report_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 UssdData::delivery_report() const {
  return delivery_report_;
}
inline void UssdData::set_delivery_report(::google::protobuf::int32 value) {
  _set_bit(10);
  delivery_report_ = value;
}

// optional string imsi = 12;
inline bool UssdData::has_imsi() const {
  return _has_bit(11);
}
inline void UssdData::clear_imsi() {
  if (imsi_ != &_default_imsi_) {
    imsi_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& UssdData::imsi() const {
  return *imsi_;
}
inline void UssdData::set_imsi(const ::std::string& value) {
  _set_bit(11);
  if (imsi_ == &_default_imsi_) {
    imsi_ = new ::std::string;
  }
  imsi_->assign(value);
}
inline void UssdData::set_imsi(const char* value) {
  _set_bit(11);
  if (imsi_ == &_default_imsi_) {
    imsi_ = new ::std::string;
  }
  imsi_->assign(value);
}
inline void UssdData::set_imsi(const char* value, size_t size) {
  _set_bit(11);
  if (imsi_ == &_default_imsi_) {
    imsi_ = new ::std::string;
  }
  imsi_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UssdData::mutable_imsi() {
  _set_bit(11);
  if (imsi_ == &_default_imsi_) {
    imsi_ = new ::std::string;
  }
  return imsi_;
}

// optional int32 sender_session_id = 13 [default = 0];
inline bool UssdData::has_sender_session_id() const {
  return _has_bit(12);
}
inline void UssdData::clear_sender_session_id() {
  sender_session_id_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 UssdData::sender_session_id() const {
  return sender_session_id_;
}
inline void UssdData::set_sender_session_id(::google::protobuf::int32 value) {
  _set_bit(12);
  sender_session_id_ = value;
}

// optional int32 receiver_session_id = 14 [default = 0];
inline bool UssdData::has_receiver_session_id() const {
  return _has_bit(13);
}
inline void UssdData::clear_receiver_session_id() {
  receiver_session_id_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 UssdData::receiver_session_id() const {
  return receiver_session_id_;
}
inline void UssdData::set_receiver_session_id(::google::protobuf::int32 value) {
  _set_bit(13);
  receiver_session_id_ = value;
}

// optional string username = 15;
inline bool UssdData::has_username() const {
  return _has_bit(14);
}
inline void UssdData::clear_username() {
  if (username_ != &_default_username_) {
    username_->clear();
  }
  _clear_bit(14);
}
inline const ::std::string& UssdData::username() const {
  return *username_;
}
inline void UssdData::set_username(const ::std::string& value) {
  _set_bit(14);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UssdData::set_username(const char* value) {
  _set_bit(14);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UssdData::set_username(const char* value, size_t size) {
  _set_bit(14);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UssdData::mutable_username() {
  _set_bit(14);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  return username_;
}

// optional string password = 16;
inline bool UssdData::has_password() const {
  return _has_bit(15);
}
inline void UssdData::clear_password() {
  if (password_ != &_default_password_) {
    password_->clear();
  }
  _clear_bit(15);
}
inline const ::std::string& UssdData::password() const {
  return *password_;
}
inline void UssdData::set_password(const ::std::string& value) {
  _set_bit(15);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void UssdData::set_password(const char* value) {
  _set_bit(15);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void UssdData::set_password(const char* value, size_t size) {
  _set_bit(15);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UssdData::mutable_password() {
  _set_bit(15);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  return password_;
}

// optional string app_id = 17;
inline bool UssdData::has_app_id() const {
  return _has_bit(16);
}
inline void UssdData::clear_app_id() {
  if (app_id_ != &_default_app_id_) {
    app_id_->clear();
  }
  _clear_bit(16);
}
inline const ::std::string& UssdData::app_id() const {
  return *app_id_;
}
inline void UssdData::set_app_id(const ::std::string& value) {
  _set_bit(16);
  if (app_id_ == &_default_app_id_) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void UssdData::set_app_id(const char* value) {
  _set_bit(16);
  if (app_id_ == &_default_app_id_) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void UssdData::set_app_id(const char* value, size_t size) {
  _set_bit(16);
  if (app_id_ == &_default_app_id_) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UssdData::mutable_app_id() {
  _set_bit(16);
  if (app_id_ == &_default_app_id_) {
    app_id_ = new ::std::string;
  }
  return app_id_;
}

#endif  // PROTOBUF_UssdData_2eproto__INCLUDED
