// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "CdrMsg.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace {

const ::google::protobuf::Descriptor* SubmitMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmitMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeliverMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeliverMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CdrMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CdrMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CdrMsg_MSG_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CdrMsg_2eproto() {
  protobuf_AddDesc_CdrMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CdrMsg.proto");
  GOOGLE_CHECK(file != NULL);
  SubmitMsg_descriptor_ = file->message_type(0);
  static const int SubmitMsg_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, oa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, da_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, interface_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, reg_del_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, circle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, expiry_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, dcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, lang_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, submit_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, submit_msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, session_endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, sender_sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, receiver_sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, charging_status_),
  };
  SubmitMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmitMsg_descriptor_,
      SubmitMsg::default_instance_,
      SubmitMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmitMsg));
  DeliverMsg_descriptor_ = file->message_type(1);
  static const int DeliverMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverMsg, submit_msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverMsg, submit_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverMsg, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverMsg, delivery_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverMsg, error_code_),
  };
  DeliverMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeliverMsg_descriptor_,
      DeliverMsg::default_instance_,
      DeliverMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliverMsg));
  CdrMsg_descriptor_ = file->message_type(2);
  static const int CdrMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdrMsg, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdrMsg, submit_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdrMsg, deliver_msg_),
  };
  CdrMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CdrMsg_descriptor_,
      CdrMsg::default_instance_,
      CdrMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdrMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CdrMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CdrMsg));
  CdrMsg_MSG_TYPE_descriptor_ = CdrMsg_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CdrMsg_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmitMsg_descriptor_, &SubmitMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliverMsg_descriptor_, &DeliverMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CdrMsg_descriptor_, &CdrMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CdrMsg_2eproto() {
  delete SubmitMsg::default_instance_;
  delete SubmitMsg_reflection_;
  delete DeliverMsg::default_instance_;
  delete DeliverMsg_reflection_;
  delete CdrMsg::default_instance_;
  delete CdrMsg_reflection_;
}

void protobuf_AddDesc_CdrMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_DeliverToEsme_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014CdrMsg.proto\032\023DeliverToEsme.proto\"\205\003\n\t"
    "SubmitMsg\022\017\n\007task_id\030\001 \002(\r\022\016\n\006msg_id\030\002 \002"
    "(\r\022\n\n\002oa\030\003 \002(\t\022\n\n\002da\030\004 \002(\t\022\013\n\003msg\030\005 \002(\014\022"
    "\024\n\014interface_id\030\006 \002(\005\022\017\n\007reg_del\030\007 \001(\005\022\021"
    "\n\tcircle_id\030\010 \001(\005\022\022\n\nchannel_id\030\t \001(\005\022\023\n"
    "\013expiry_time\030\n \001(\005\022\013\n\003pid\030\013 \001(\005\022\013\n\003dcs\030\014"
    " \001(\005\022\022\n\007lang_id\030\r \001(\005:\0010\022\016\n\006status\030\016 \001(\005"
    "\022\023\n\013submit_time\030\017 \001(\005\022\024\n\014submit_msgid\030\020 "
    "\001(\005\022\027\n\017session_endtime\030\021 \001(\005\022\030\n\020sender_s"
    "essionid\030\022 \001(\005\022\032\n\022receiver_sessionid\030\023 \001"
    "(\005\022\027\n\017charging_status\030\024 \001(\005\"r\n\nDeliverMs"
    "g\022\024\n\014submit_msgid\030\001 \001(\005\022\023\n\013submit_time\030\002"
    " \001(\005\022\016\n\006status\030\003 \001(\005\022\025\n\rdelivery_time\030\004 "
    "\001(\005\022\022\n\nerror_code\030\005 \001(\005\"\250\001\n\006CdrMsg\022\"\n\010ms"
    "g_type\030\001 \002(\0162\020.CdrMsg.MSG_TYPE\022\"\n\nsubmit"
    "_msg\030\002 \001(\0132\016.DeliverToEsme\022 \n\013deliver_ms"
    "g\030\003 \001(\0132\013.DeliverMsg\"4\n\010MSG_TYPE\022\n\n\006SUBM"
    "IT\020\001\022\013\n\007DELIVER\020\002\022\017\n\013USSD_SUBMIT\020\003", 714);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CdrMsg.proto", &protobuf_RegisterTypes);
  SubmitMsg::default_instance_ = new SubmitMsg();
  DeliverMsg::default_instance_ = new DeliverMsg();
  CdrMsg::default_instance_ = new CdrMsg();
  SubmitMsg::default_instance_->InitAsDefaultInstance();
  DeliverMsg::default_instance_->InitAsDefaultInstance();
  CdrMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CdrMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CdrMsg_2eproto {
  StaticDescriptorInitializer_CdrMsg_2eproto() {
    protobuf_AddDesc_CdrMsg_2eproto();
  }
} static_descriptor_initializer_CdrMsg_2eproto_;


// ===================================================================

const ::std::string SubmitMsg::_default_oa_;
const ::std::string SubmitMsg::_default_da_;
const ::std::string SubmitMsg::_default_msg_;
#ifndef _MSC_VER
const int SubmitMsg::kTaskIdFieldNumber;
const int SubmitMsg::kMsgIdFieldNumber;
const int SubmitMsg::kOaFieldNumber;
const int SubmitMsg::kDaFieldNumber;
const int SubmitMsg::kMsgFieldNumber;
const int SubmitMsg::kInterfaceIdFieldNumber;
const int SubmitMsg::kRegDelFieldNumber;
const int SubmitMsg::kCircleIdFieldNumber;
const int SubmitMsg::kChannelIdFieldNumber;
const int SubmitMsg::kExpiryTimeFieldNumber;
const int SubmitMsg::kPidFieldNumber;
const int SubmitMsg::kDcsFieldNumber;
const int SubmitMsg::kLangIdFieldNumber;
const int SubmitMsg::kStatusFieldNumber;
const int SubmitMsg::kSubmitTimeFieldNumber;
const int SubmitMsg::kSubmitMsgidFieldNumber;
const int SubmitMsg::kSessionEndtimeFieldNumber;
const int SubmitMsg::kSenderSessionidFieldNumber;
const int SubmitMsg::kReceiverSessionidFieldNumber;
const int SubmitMsg::kChargingStatusFieldNumber;
#endif  // !_MSC_VER

SubmitMsg::SubmitMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubmitMsg::InitAsDefaultInstance() {}

SubmitMsg::SubmitMsg(const SubmitMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubmitMsg::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  msg_id_ = 0u;
  oa_ = const_cast< ::std::string*>(&_default_oa_);
  da_ = const_cast< ::std::string*>(&_default_da_);
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  interface_id_ = 0;
  reg_del_ = 0;
  circle_id_ = 0;
  channel_id_ = 0;
  expiry_time_ = 0;
  pid_ = 0;
  dcs_ = 0;
  lang_id_ = 0;
  status_ = 0;
  submit_time_ = 0;
  submit_msgid_ = 0;
  session_endtime_ = 0;
  sender_sessionid_ = 0;
  receiver_sessionid_ = 0;
  charging_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmitMsg::~SubmitMsg() {
  SharedDtor();
}

void SubmitMsg::SharedDtor() {
  if (oa_ != &_default_oa_) {
    delete oa_;
  }
  if (da_ != &_default_da_) {
    delete da_;
  }
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SubmitMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitMsg_descriptor_;
}

const SubmitMsg& SubmitMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CdrMsg_2eproto();  return *default_instance_;
}

SubmitMsg* SubmitMsg::default_instance_ = NULL;

SubmitMsg* SubmitMsg::New() const {
  return new SubmitMsg;
}

void SubmitMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    msg_id_ = 0u;
    if (_has_bit(2)) {
      if (oa_ != &_default_oa_) {
        oa_->clear();
      }
    }
    if (_has_bit(3)) {
      if (da_ != &_default_da_) {
        da_->clear();
      }
    }
    if (_has_bit(4)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    interface_id_ = 0;
    reg_del_ = 0;
    circle_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    channel_id_ = 0;
    expiry_time_ = 0;
    pid_ = 0;
    dcs_ = 0;
    lang_id_ = 0;
    status_ = 0;
    submit_time_ = 0;
    submit_msgid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    session_endtime_ = 0;
    sender_sessionid_ = 0;
    receiver_sessionid_ = 0;
    charging_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmitMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &task_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_msg_id;
        break;
      }
      
      // required uint32 msg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_msg_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &msg_id_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_oa;
        break;
      }
      
      // required string oa = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_oa:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_oa()));
        if (input->ExpectTag(34)) goto parse_da;
        break;
      }
      
      // required string da = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_da:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_da()));
        if (input->ExpectTag(42)) goto parse_msg;
        break;
      }
      
      // required bytes msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_msg:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_msg()));
        if (input->ExpectTag(48)) goto parse_interface_id;
        break;
      }
      
      // required int32 interface_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_interface_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &interface_id_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_reg_del;
        break;
      }
      
      // optional int32 reg_del = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_reg_del:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &reg_del_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_circle_id;
        break;
      }
      
      // optional int32 circle_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_circle_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &circle_id_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_channel_id;
        break;
      }
      
      // optional int32 channel_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_channel_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &channel_id_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_expiry_time;
        break;
      }
      
      // optional int32 expiry_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_expiry_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &expiry_time_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_pid;
        break;
      }
      
      // optional int32 pid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &pid_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_dcs;
        break;
      }
      
      // optional int32 dcs = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dcs:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &dcs_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_lang_id;
        break;
      }
      
      // optional int32 lang_id = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lang_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &lang_id_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_status;
        break;
      }
      
      // optional int32 status = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &status_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_submit_time;
        break;
      }
      
      // optional int32 submit_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_submit_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &submit_time_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_submit_msgid;
        break;
      }
      
      // optional int32 submit_msgid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_submit_msgid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &submit_msgid_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_session_endtime;
        break;
      }
      
      // optional int32 session_endtime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_session_endtime:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &session_endtime_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_sender_sessionid;
        break;
      }
      
      // optional int32 sender_sessionid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sender_sessionid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &sender_sessionid_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_receiver_sessionid;
        break;
      }
      
      // optional int32 receiver_sessionid = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_receiver_sessionid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &receiver_sessionid_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_charging_status;
        break;
      }
      
      // optional int32 charging_status = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_charging_status:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &charging_status_));
        _set_bit(19);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubmitMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SubmitMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 task_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->task_id(), output);
  }
  
  // required uint32 msg_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->msg_id(), output);
  }
  
  // required string oa = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->oa(), output);
  }
  
  // required string da = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->da(), output);
  }
  
  // required bytes msg = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->msg(), output);
  }
  
  // required int32 interface_id = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->interface_id(), output);
  }
  
  // optional int32 reg_del = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->reg_del(), output);
  }
  
  // optional int32 circle_id = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->circle_id(), output);
  }
  
  // optional int32 channel_id = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(9, this->channel_id(), output);
  }
  
  // optional int32 expiry_time = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(10, this->expiry_time(), output);
  }
  
  // optional int32 pid = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(11, this->pid(), output);
  }
  
  // optional int32 dcs = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(12, this->dcs(), output);
  }
  
  // optional int32 lang_id = 13 [default = 0];
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(13, this->lang_id(), output);
  }
  
  // optional int32 status = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(14, this->status(), output);
  }
  
  // optional int32 submit_time = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(15, this->submit_time(), output);
  }
  
  // optional int32 submit_msgid = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(16, this->submit_msgid(), output);
  }
  
  // optional int32 session_endtime = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(17, this->session_endtime(), output);
  }
  
  // optional int32 sender_sessionid = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(18, this->sender_sessionid(), output);
  }
  
  // optional int32 receiver_sessionid = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(19, this->receiver_sessionid(), output);
  }
  
  // optional int32 charging_status = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(20, this->charging_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubmitMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // required uint32 msg_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->msg_id(), target);
  }
  
  // required string oa = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->oa(), target);
  }
  
  // required string da = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->da(), target);
  }
  
  // required bytes msg = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->msg(), target);
  }
  
  // required int32 interface_id = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->interface_id(), target);
  }
  
  // optional int32 reg_del = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->reg_del(), target);
  }
  
  // optional int32 circle_id = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->circle_id(), target);
  }
  
  // optional int32 channel_id = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(9, this->channel_id(), target);
  }
  
  // optional int32 expiry_time = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(10, this->expiry_time(), target);
  }
  
  // optional int32 pid = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(11, this->pid(), target);
  }
  
  // optional int32 dcs = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(12, this->dcs(), target);
  }
  
  // optional int32 lang_id = 13 [default = 0];
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(13, this->lang_id(), target);
  }
  
  // optional int32 status = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(14, this->status(), target);
  }
  
  // optional int32 submit_time = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(15, this->submit_time(), target);
  }
  
  // optional int32 submit_msgid = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(16, this->submit_msgid(), target);
  }
  
  // optional int32 session_endtime = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(17, this->session_endtime(), target);
  }
  
  // optional int32 sender_sessionid = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(18, this->sender_sessionid(), target);
  }
  
  // optional int32 receiver_sessionid = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(19, this->receiver_sessionid(), target);
  }
  
  // optional int32 charging_status = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(20, this->charging_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubmitMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->task_id());
    }
    
    // required uint32 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->msg_id());
    }
    
    // required string oa = 3;
    if (has_oa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->oa());
    }
    
    // required string da = 4;
    if (has_da()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->da());
    }
    
    // required bytes msg = 5;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->msg());
    }
    
    // required int32 interface_id = 6;
    if (has_interface_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->interface_id());
    }
    
    // optional int32 reg_del = 7;
    if (has_reg_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->reg_del());
    }
    
    // optional int32 circle_id = 8;
    if (has_circle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->circle_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 channel_id = 9;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->channel_id());
    }
    
    // optional int32 expiry_time = 10;
    if (has_expiry_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->expiry_time());
    }
    
    // optional int32 pid = 11;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->pid());
    }
    
    // optional int32 dcs = 12;
    if (has_dcs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->dcs());
    }
    
    // optional int32 lang_id = 13 [default = 0];
    if (has_lang_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->lang_id());
    }
    
    // optional int32 status = 14;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->status());
    }
    
    // optional int32 submit_time = 15;
    if (has_submit_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->submit_time());
    }
    
    // optional int32 submit_msgid = 16;
    if (has_submit_msgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->submit_msgid());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 session_endtime = 17;
    if (has_session_endtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->session_endtime());
    }
    
    // optional int32 sender_sessionid = 18;
    if (has_sender_sessionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->sender_sessionid());
    }
    
    // optional int32 receiver_sessionid = 19;
    if (has_receiver_sessionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->receiver_sessionid());
    }
    
    // optional int32 charging_status = 20;
    if (has_charging_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->charging_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SubmitMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmitMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmitMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmitMsg::MergeFrom(const SubmitMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_id(from.task_id());
    }
    if (from._has_bit(1)) {
      set_msg_id(from.msg_id());
    }
    if (from._has_bit(2)) {
      set_oa(from.oa());
    }
    if (from._has_bit(3)) {
      set_da(from.da());
    }
    if (from._has_bit(4)) {
      set_msg(from.msg());
    }
    if (from._has_bit(5)) {
      set_interface_id(from.interface_id());
    }
    if (from._has_bit(6)) {
      set_reg_del(from.reg_del());
    }
    if (from._has_bit(7)) {
      set_circle_id(from.circle_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_channel_id(from.channel_id());
    }
    if (from._has_bit(9)) {
      set_expiry_time(from.expiry_time());
    }
    if (from._has_bit(10)) {
      set_pid(from.pid());
    }
    if (from._has_bit(11)) {
      set_dcs(from.dcs());
    }
    if (from._has_bit(12)) {
      set_lang_id(from.lang_id());
    }
    if (from._has_bit(13)) {
      set_status(from.status());
    }
    if (from._has_bit(14)) {
      set_submit_time(from.submit_time());
    }
    if (from._has_bit(15)) {
      set_submit_msgid(from.submit_msgid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_session_endtime(from.session_endtime());
    }
    if (from._has_bit(17)) {
      set_sender_sessionid(from.sender_sessionid());
    }
    if (from._has_bit(18)) {
      set_receiver_sessionid(from.receiver_sessionid());
    }
    if (from._has_bit(19)) {
      set_charging_status(from.charging_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmitMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitMsg::CopyFrom(const SubmitMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitMsg::Swap(SubmitMsg* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(oa_, other->oa_);
    std::swap(da_, other->da_);
    std::swap(msg_, other->msg_);
    std::swap(interface_id_, other->interface_id_);
    std::swap(reg_del_, other->reg_del_);
    std::swap(circle_id_, other->circle_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(expiry_time_, other->expiry_time_);
    std::swap(pid_, other->pid_);
    std::swap(dcs_, other->dcs_);
    std::swap(lang_id_, other->lang_id_);
    std::swap(status_, other->status_);
    std::swap(submit_time_, other->submit_time_);
    std::swap(submit_msgid_, other->submit_msgid_);
    std::swap(session_endtime_, other->session_endtime_);
    std::swap(sender_sessionid_, other->sender_sessionid_);
    std::swap(receiver_sessionid_, other->receiver_sessionid_);
    std::swap(charging_status_, other->charging_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SubmitMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* SubmitMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SubmitMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SubmitMsg_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int DeliverMsg::kSubmitMsgidFieldNumber;
const int DeliverMsg::kSubmitTimeFieldNumber;
const int DeliverMsg::kStatusFieldNumber;
const int DeliverMsg::kDeliveryTimeFieldNumber;
const int DeliverMsg::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

DeliverMsg::DeliverMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeliverMsg::InitAsDefaultInstance() {}

DeliverMsg::DeliverMsg(const DeliverMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeliverMsg::SharedCtor() {
  _cached_size_ = 0;
  submit_msgid_ = 0;
  submit_time_ = 0;
  status_ = 0;
  delivery_time_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliverMsg::~DeliverMsg() {
  SharedDtor();
}

void DeliverMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DeliverMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliverMsg_descriptor_;
}

const DeliverMsg& DeliverMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CdrMsg_2eproto();  return *default_instance_;
}

DeliverMsg* DeliverMsg::default_instance_ = NULL;

DeliverMsg* DeliverMsg::New() const {
  return new DeliverMsg;
}

void DeliverMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    submit_msgid_ = 0;
    submit_time_ = 0;
    status_ = 0;
    delivery_time_ = 0;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliverMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 submit_msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &submit_msgid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_submit_time;
        break;
      }
      
      // optional int32 submit_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_submit_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &submit_time_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &status_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_delivery_time;
        break;
      }
      
      // optional int32 delivery_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_delivery_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &delivery_time_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_error_code;
        break;
      }
      
      // optional int32 error_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_error_code:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &error_code_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeliverMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DeliverMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 submit_msgid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->submit_msgid(), output);
  }
  
  // optional int32 submit_time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->submit_time(), output);
  }
  
  // optional int32 status = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->status(), output);
  }
  
  // optional int32 delivery_time = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->delivery_time(), output);
  }
  
  // optional int32 error_code = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeliverMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 submit_msgid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->submit_msgid(), target);
  }
  
  // optional int32 submit_time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->submit_time(), target);
  }
  
  // optional int32 status = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->status(), target);
  }
  
  // optional int32 delivery_time = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->delivery_time(), target);
  }
  
  // optional int32 error_code = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeliverMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 submit_msgid = 1;
    if (has_submit_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->submit_msgid());
    }
    
    // optional int32 submit_time = 2;
    if (has_submit_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->submit_time());
    }
    
    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->status());
    }
    
    // optional int32 delivery_time = 4;
    if (has_delivery_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->delivery_time());
    }
    
    // optional int32 error_code = 5;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DeliverMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliverMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeliverMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliverMsg::MergeFrom(const DeliverMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_submit_msgid(from.submit_msgid());
    }
    if (from._has_bit(1)) {
      set_submit_time(from.submit_time());
    }
    if (from._has_bit(2)) {
      set_status(from.status());
    }
    if (from._has_bit(3)) {
      set_delivery_time(from.delivery_time());
    }
    if (from._has_bit(4)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliverMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverMsg::CopyFrom(const DeliverMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverMsg::Swap(DeliverMsg* other) {
  if (other != this) {
    std::swap(submit_msgid_, other->submit_msgid_);
    std::swap(submit_time_, other->submit_time_);
    std::swap(status_, other->status_);
    std::swap(delivery_time_, other->delivery_time_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DeliverMsg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* DeliverMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DeliverMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DeliverMsg_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* CdrMsg_MSG_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CdrMsg_MSG_TYPE_descriptor_;
}
bool CdrMsg_MSG_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CdrMsg_MSG_TYPE CdrMsg::SUBMIT;
const CdrMsg_MSG_TYPE CdrMsg::DELIVER;
const CdrMsg_MSG_TYPE CdrMsg::USSD_SUBMIT;
const CdrMsg_MSG_TYPE CdrMsg::MSG_TYPE_MIN;
const CdrMsg_MSG_TYPE CdrMsg::MSG_TYPE_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CdrMsg::kMsgTypeFieldNumber;
const int CdrMsg::kSubmitMsgFieldNumber;
const int CdrMsg::kDeliverMsgFieldNumber;
#endif  // !_MSC_VER

CdrMsg::CdrMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CdrMsg::InitAsDefaultInstance() {  submit_msg_ = const_cast< ::DeliverToEsme*>(&::DeliverToEsme::default_instance());
  deliver_msg_ = const_cast< ::DeliverMsg*>(&::DeliverMsg::default_instance());
}

CdrMsg::CdrMsg(const CdrMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CdrMsg::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 1;
  submit_msg_ = NULL;
  deliver_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CdrMsg::~CdrMsg() {
  SharedDtor();
}

void CdrMsg::SharedDtor() {
  if (this != default_instance_) {
    delete submit_msg_;
    delete deliver_msg_;
  }
}

const ::google::protobuf::Descriptor* CdrMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CdrMsg_descriptor_;
}

const CdrMsg& CdrMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CdrMsg_2eproto();  return *default_instance_;
}

CdrMsg* CdrMsg::default_instance_ = NULL;

CdrMsg* CdrMsg::New() const {
  return new CdrMsg;
}

void CdrMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 1;
    if (_has_bit(1)) {
      if (submit_msg_ != NULL) submit_msg_->::DeliverToEsme::Clear();
    }
    if (_has_bit(2)) {
      if (deliver_msg_ != NULL) deliver_msg_->::DeliverMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CdrMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .CdrMsg.MSG_TYPE msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::CdrMsg_MSG_TYPE_IsValid(value)) {
          set_msg_type(static_cast< ::CdrMsg_MSG_TYPE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(18)) goto parse_submit_msg;
        break;
      }
      
      // optional .DeliverToEsme submit_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_submit_msg:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_submit_msg()));
        if (input->ExpectTag(26)) goto parse_deliver_msg;
        break;
      }
      
      // optional .DeliverMsg deliver_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_deliver_msg:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_deliver_msg()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CdrMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CdrMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .CdrMsg.MSG_TYPE msg_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->msg_type(), output);
  }
  
  // optional .DeliverToEsme submit_msg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->submit_msg(), output);
  }
  
  // optional .DeliverMsg deliver_msg = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->deliver_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CdrMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CdrMsg.MSG_TYPE msg_type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->msg_type(), target);
  }
  
  // optional .DeliverToEsme submit_msg = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->submit_msg(), target);
  }
  
  // optional .DeliverMsg deliver_msg = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->deliver_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CdrMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CdrMsg.MSG_TYPE msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->msg_type());
    }
    
    // optional .DeliverToEsme submit_msg = 2;
    if (has_submit_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->submit_msg());
    }
    
    // optional .DeliverMsg deliver_msg = 3;
    if (has_deliver_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->deliver_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CdrMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CdrMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CdrMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CdrMsg::MergeFrom(const CdrMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msg_type(from.msg_type());
    }
    if (from._has_bit(1)) {
      mutable_submit_msg()->::DeliverToEsme::MergeFrom(from.submit_msg());
    }
    if (from._has_bit(2)) {
      mutable_deliver_msg()->::DeliverMsg::MergeFrom(from.deliver_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CdrMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CdrMsg::CopyFrom(const CdrMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CdrMsg::Swap(CdrMsg* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(submit_msg_, other->submit_msg_);
    std::swap(deliver_msg_, other->deliver_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CdrMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_submit_msg()) {
    if (!this->submit_msg().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* CdrMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CdrMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CdrMsg_reflection_;
}
